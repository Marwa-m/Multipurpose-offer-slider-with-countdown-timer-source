@model OfferModel

<div class="panel-group">
    @await Component.InvokeAsync("AdminWidget", new { widgetZone = "admin_offer_details_info_top", additionalData = Model.Id })
    <div class="panel panel-default">
        <div class="panel-body">
            @(Html.LocalizedEditor<OfferModel, OfferLocalizedModel>("offer-info-localized",
                @<div>
                    <div class="form-group">
                        <div class="col-md-3">
                            <nop-label asp-for="@Model.Locales[item].Name" />
                        </div>
                        <div class="col-md-9">
                            <nop-editor asp-for="@Model.Locales[item].Name" />
                            <span asp-validation-for="@Model.Locales[item].Name"></span>
                        </div>
                    </div>
                    <input type="hidden" asp-for="@Model.Locales[item].LanguageId" />
                </div>
                    ,
                            @<div>
                                <div class="form-group">
                                    <div class="col-md-3">
                                        <nop-label asp-for="Name" />
                                    </div>
                                    <div class="col-md-9">
                                        <nop-editor asp-for="Name" />
                                        <span asp-validation-for="Name"></span>
                                    </div>
                                </div>
                            </div>
                                          ))
            <div class="form-group">
                <div class="col-md-3">
                    <nop-label asp-for="ShowName" />
                </div>
                <div class="col-md-9">
                    <nop-editor asp-for="ShowName" />
                    <span asp-validation-for="ShowName"></span>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    <nop-label asp-for="SelectedCustomerRoleIds" />
                </div>
                <div class="col-md-9">
                  <nop-select asp-for="SelectedCustomerRoleIds" asp-items="Model.AvailableCustomerRoles" asp-multiple="true" />
                            <script type="text/javascript">
                        $(document).ready(function() {
                            var rolesIdsInput = $('#@Html.IdFor(model => model.SelectedCustomerRoleIds)')
                                .data("kendoMultiSelect");
                            rolesIdsInput.setOptions({
                                autoClose: false,
                                filter: "contains"
                            });

                            @if (Model.AvailableCustomerRoles.Count == 0)
                            {
                                <text>
                                    rolesIdsInput.setOptions({
                                        enable: false,
                                        placeholder: 'No customer roles available'
                                    });
                                    rolesIdsInput._placeholder();
                                    rolesIdsInput._enable();
                                </text>
                            }
                        });
                            </script>
                    </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    <nop-label asp-for="SelectedStoreIds" />
                </div>
                <div class="col-md-9">
                            <nop-select asp-for="SelectedStoreIds" asp-items="Model.AvailableStores" asp-multiple="true" />
                            <script type="text/javascript">
                                $(document).ready(function() {
                                    var storesIdsInput = $('#@Html.IdFor(model => model.SelectedStoreIds)')
                                        .data("kendoMultiSelect");
                                    storesIdsInput.setOptions({
                                        autoClose: false,
                                        filter: "contains"
                                    });

                                    @if (Model.AvailableStores.Count == 0)
                                    {
                                        <text>
                                            storesIdsInput.setOptions({
                                                enable: false,
                                                placeholder: 'No stores available'
                                            });
                                            storesIdsInput._placeholder();
                                            storesIdsInput._enable();
                                        </text>
                                    }
                                });
                            </script>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    <nop-label asp-for="Published" />
                </div>
                <div class="col-md-9">
                    <nop-editor asp-for="Published" />
                    <span asp-validation-for="Published"></span>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    <nop-label asp-for="DisplayOrder" />
                </div>
                <div class="col-md-9">
                    <nop-editor asp-for="DisplayOrder" />
                    <span asp-validation-for="DisplayOrder"></span>
                </div>
            </div>
        </div>
    </div>
    @await Component.InvokeAsync("AdminWidget", new { widgetZone = "admin_offer_details_info_bottom", additionalData = Model.Id })
</div>